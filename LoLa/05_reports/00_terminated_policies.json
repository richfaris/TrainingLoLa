{
  "id": "4ae060a0-cd44-4147-bc3c-276bfef3b752",
  "name": "Terminated Policies",
  "description": "This report identifies insurance policies that have been either CANCELED or EXPIRED within a specified reporting period. It retrieves key details such as policy number, named insured(s), policy type, termination reason, and cancellation date.",
  "report_runner": "sql_runner",
  "custom": false,
  "run_local": false,
  "date_type": "range",
  "hidden": false,
  "report_sheets": [
    {
      "id": "87f214b0-02cc-4693-aa2b-ee2cc18f71b6",
      "name": "Policy List",
      "sql_query": "/*\n=====================================================================================\nReport: Terminated Policies Report (Canceled or Expired)\n-------------------------------------------------------------------------------------\nDescription:\nThis report identifies insurance policies that have been either CANCELED or EXPIRED \nwithin a specified reporting period. It retrieves key details such as policy number, \nnamed insured(s), policy type, termination reason, and cancellation date. \n\nHighlights:\n- Filters revisions based on policy status and revision date.\n- Aggregates named insureds per policy.\n- Ensures only active, non-archived policies are included at the revision level.\n- Outputs results ordered numerically by policy number.\n\nInputs:\n- <<$StartDate>>: Beginning of the reporting window (inclusive).\n- <<$EndDate>>: End of the reporting window (inclusive).\n\nOutput Fields:\n- Policy Number, Named Insured(s), Policy Type, Terminated Reason, Date Terminated\n=====================================================================================\n*/\n\n-- CTE 1: Define the reporting date range based on input parameters\nWITH dates_cte AS (\n  SELECT\n    CAST('<<$StartDate>>' AS DATETIME) AS reportStartDate, -- Report start date (inclusive)\n    CAST('<<$EndDate>>' AS DATETIME) AS reportEndDate      -- Report end date (inclusive)\n),\n\n-- CTE 2: Create derived period values from the report dates\nperiod_cte AS (\n  SELECT\n    d.reportStartDate,\n    d.reportEndDate,\n    d.reportStartDate AS periodStart, -- Start of the reporting window\n    d.reportEndDate + INTERVAL 1 DAY - INTERVAL 1 MICROSECOND AS periodEnd, -- End of the reporting day (to the last microsecond)\n    d.reportStartDate - INTERVAL 1 MICROSECOND AS priorEnd -- Just before the report start date\n  FROM dates_cte d\n),\n\n-- CTE 3: Aggregate named insureds per revision\nnamed_insureds_cte AS (\n  SELECT\n    rc.revision_id,\n    GROUP_CONCAT(vi.insured_name ORDER BY rc.date_added SEPARATOR ', ') AS insured_names -- Concatenate insured names for each revision\n  FROM v_revisions_contacts rc\n  JOIN v_insureds vi ON vi.insured_id = rc.contact_id\n  WHERE rc.relationship = 'named_insured' -- Filter only named insureds\n  GROUP BY rc.revision_id\n)\n\n-- Main query: Select canceled or expired policies within the given period\nSELECT\n  bc_excel_link(concat('britecore/policies/information?policyId=', r.policy_id), r.policy_number) AS `Policy Number`,                                  -- Unique identifier for the policy\n  ni.insured_names AS `Named Insured(s)`,                              -- List of named insureds (from CTE)\n  pt.policy_type AS `Policy Type`,                                     -- Category/type of the insurance policy\n  COALESCE(r.policy_status_reason, r.policy_status, 'Non-Payment of Premium') AS `Terminated Reason`, -- Reason for termination\n  r.cancel_date AS `Date Terminated`                                   -- Cancellation date of the policy\nFROM period_cte d\nSTRAIGHT_JOIN v_revisions r                                            -- Main revisions table (policy-level records)\nLEFT JOIN v_policy_types pt ON pt.policy_type_id = r.policy_type_id    -- Join to get policy type\nLEFT JOIN v_revisions_agencies ra ON ra.revision_id = r.revision_id    -- Join to get agency info\nLEFT JOIN named_insureds_cte ni ON ni.revision_id = r.revision_id      -- Join with CTE for named insureds\nWHERE\n  r.revision_date BETWEEN d.reportStartDate AND d.reportEndDate        -- Filter records in the given date window\n  AND r.policy_active_flag = 1                                         -- Only include active policies (at the time of revision)\n  AND r.revision_state != 'archived'                                   -- Exclude archived revisions\n  AND (r.policy_status LIKE '%%Canceled%%' OR r.policy_status LIKE '%%Expired%%') -- Only include canceled or expired policies\nGROUP BY r.policy_id                                                   -- Grouping by policy to aggregate multiple revisions\nHAVING \n  GROUP_CONCAT(r.policy_status) LIKE '%%Canceled%%' OR \n  GROUP_CONCAT(r.policy_status) LIKE '%%Expired%%'                     -- Ensures we report only truly canceled/expired ones\nORDER BY CAST(REPLACE(r.policy_number, '-', '') AS decimal(50)) ASC    -- Sort by policy number numerically, ignoring dashes\n",
      "order": 0
    },
    {
      "id": "50c1c329-8aa3-43ad-a795-2e0cd61e8515",
      "name": "Totals By Reason",
      "sql_query": "/*\n=====================================================================================\nReport: Summary of Terminated Policies by Reason\n-------------------------------------------------------------------------------------\nDescription:\nThis report provides a summary count of insurance policies that were either \nCANCELED or EXPIRED within a specified reporting period. It groups the results \nby termination reason and includes a final total row showing the overall count.\n\nHighlights:\n- Filters out inactive or archived policy revisions.\n- Groups by policy termination reason using COALESCE to handle NULLs.\n- Adds a final row labeled \"Totals\" with the sum of all canceled/expired policies.\n\nInputs:\n- <<$StartDate>>: Start date of the reporting period (inclusive).\n- <<$EndDate>>: End date of the reporting period (inclusive).\n\nOutput Fields:\n- Termination Reason: Reason a policy was terminated (e.g., Non-Payment, Expired)\n- Policy Count: Number of policies with that reason\n=====================================================================================\n*/\n\n-- CTE 1: Define reporting start and end dates from input\nWITH dates_cte AS (\n  SELECT\n    CAST('<<$StartDate>>' AS DATETIME) AS reportStartDate,\n    CAST('<<$EndDate>>' AS DATETIME) AS reportEndDate\n),\n-- CTE 2: Calculate time windows based on input dates\nperiod_cte AS (\n  SELECT\n    d.reportStartDate,\n    d.reportEndDate,\n    d.reportStartDate AS periodStart,\n    d.reportEndDate + INTERVAL 1 DAY - INTERVAL 1 MICROSECOND AS periodEnd,\n    d.reportStartDate - INTERVAL 1 MICROSECOND AS priorEnd\n  FROM dates_cte d\n),\n-- CTE 3: Aggregate named insureds per revision (not used in SELECT but joined for future flexibility)\nnamed_insureds_cte AS (\n  SELECT\n    rc.revision_id,\n    GROUP_CONCAT(vi.insured_name ORDER BY rc.date_added SEPARATOR ', ') AS insured_names\n  FROM v_revisions_contacts rc\n  JOIN v_insureds vi ON vi.insured_id = rc.contact_id\n  WHERE rc.relationship = 'named_insured'\n  GROUP BY rc.revision_id\n),\n\n-- CTE 4: Count policies grouped by termination reason\ndetails AS (\n  SELECT\n    COALESCE(r.policy_status_reason, r.policy_status, 'Non-Payment of Premium') AS `Termination Reason`, -- Reason with fallback\n    COUNT(DISTINCT r.policy_id) AS `Policy Count` -- Count of unique terminated policies\n  FROM period_cte d\n  STRAIGHT_JOIN v_revisions r\n  LEFT JOIN v_policy_types pt ON pt.policy_type_id = r.policy_type_id\n  LEFT JOIN v_revisions_agencies ra ON ra.revision_id = r.revision_id\n  LEFT JOIN named_insureds_cte ni ON ni.revision_id = r.revision_id\n  WHERE\n    r.revision_date BETWEEN d.reportStartDate AND d.reportEndDate -- Only revisions in period\n    AND r.policy_active_flag = 1                                  -- Must be active\n    AND r.revision_state != 'archived'                            -- Exclude archived revisions\n    AND (r.policy_status LIKE '%%Canceled%%' OR r.policy_status LIKE '%%Expired%%') -- Only terminated policies\n  GROUP BY `Termination Reason`\n)\n-- Final output: Include totals row and order by count (totals last)\nSELECT * FROM (\n  SELECT * FROM details\n  UNION ALL\n  SELECT\n    'Totals' AS `Termination Reason`,\n    SUM(d.`Policy Count`) AS `Policy Count`\n  FROM details d\n) AS final_output\nORDER BY\n  CASE WHEN `Termination Reason` = 'Totals' THEN 1 ELSE 0 END,\n  `Policy Count` DESC;\n",
      "order": 1
    }
  ],
  "output_format": "excel",
  "output_file_delimiter": ",",
  "additional_report_settings": {
    "includeColumnHeaders": true,
    "previewId": "",
    "entity": "",
    "includeCoverSheet": true
  },
  "category_name": "Underwriting"
}
