{
  "id": "dfda8fb2-21e9-11f0-a33b-0affecc16349",
  "name": "MCAS Report",
  "description": "Used to file out the Market Conduct Annual Statement (MCAS) requirements",
  "report_runner": "sql_runner",
  "custom": false,
  "run_local": false,
  "hidden": false,
  "date_type": "range",
  "report_sheets": [
    {
      "id": "15da3c95-21ea-11f0-a33b-0affecc16349",
      "name": "Policy Overview",
      "sql_query": "-- CTE: New Business metrics\nWITH new_business AS (\n  SELECT\n    vpt.policy_type,\n    COUNT(*) AS new_business_count,\n    SUM(mpt.transaction_written_premium) AS new_transaction_written_premium\n  FROM m_premium_transactions mpt\n  JOIN v_policy_types vpt\n    ON vpt.policy_type_id = mpt.policy_type_id\n  WHERE mpt.transaction_type = 'New Business'\n  GROUP BY vpt.policy_type\n),\n\n-- CTE: Inforce policy metrics\ninforce AS (\n  SELECT\n    vpt.policy_type,\n    COUNT(*) AS inforce_count,\n    SUM(mip.inforce_premium) AS inforce_premium\n  FROM m_inforce_policies mip\n  JOIN v_policy_types vpt\n    ON vpt.policy_type_id = mip.policy_type_id\n  GROUP BY vpt.policy_type\n),\n\n-- CTE: Reinstatement metrics\nreinstatement AS (\n  SELECT\n    vpt.policy_type,\n    COUNT(*) AS reinstatement_count,\n    SUM(mpt.transaction_written_premium) AS reinstatement_written_premium\n  FROM m_premium_transactions mpt\n  JOIN v_policy_types vpt\n    ON vpt.policy_type_id = mpt.policy_type_id\n  WHERE mpt.transaction_type = 'Reinstatement'\n  GROUP BY vpt.policy_type\n),\n\n-- CTE: Renewal metrics\nrenewal AS (\n  SELECT\n    vpt.policy_type,\n    COUNT(*) AS renewal_count,\n    SUM(mpt.transaction_written_premium) AS renewal_written_premium\n  FROM m_premium_transactions mpt\n  JOIN v_policy_types vpt\n    ON vpt.policy_type_id = mpt.policy_type_id\n  WHERE mpt.transaction_type = 'Renewal'\n  GROUP BY vpt.policy_type\n),\n\n-- CTE: Cancellation metrics\ncancellation AS (\n  SELECT\n    vpt.policy_type,\n    COUNT(*) AS cancellation_count,\n    SUM(mpt.transaction_written_premium) AS cancellation_written_premium\n  FROM m_premium_transactions mpt\n  JOIN v_policy_types vpt\n    ON vpt.policy_type_id = mpt.policy_type_id\n  WHERE mpt.transaction_type = 'Cancellation'\n  GROUP BY vpt.policy_type\n),\n\n-- Final metrics combination\ndetails AS (\n  SELECT\n    nb.policy_type AS `Policy Type`,\n    IFNULL(ip.inforce_count, 0) AS `Inforce Count`,\n    nb.new_business_count AS `New Count`,\n    IFNULL(rn.reinstatement_count, 0) AS `Reinstatement Count`,\n    IFNULL(re.renewal_count, 0) AS `Renewal Count`,\n    IFNULL(cn.cancellation_count, 0) AS `Cancellation Count`,\n    IFNULL(ip.inforce_premium, 0) AS `Inforce Premium`,\n    nb.new_transaction_written_premium AS `New Business Written Premium`,\n    IFNULL(rn.reinstatement_written_premium, 0) AS `Reinstatement Written Premium`,\n    IFNULL(re.renewal_written_premium, 0) AS `Renewal Written Premium`,\n    IFNULL(cn.cancellation_written_premium, 0) AS `Cancellation Written Premium`\n  FROM new_business nb\n  LEFT JOIN inforce ip ON nb.policy_type = ip.policy_type\n  LEFT JOIN reinstatement rn ON nb.policy_type = rn.policy_type\n  LEFT JOIN renewal re ON nb.policy_type = re.policy_type\n  LEFT JOIN cancellation cn ON nb.policy_type = cn.policy_type\n)\n\n-- Final output with totals\nSELECT * FROM (\n  SELECT * FROM details\n  UNION ALL\n  SELECT\n    'Totals' AS `Policy Type`,\n    SUM(d.`Inforce Count`),\n    SUM(d.`New Count`),\n    SUM(d.`Reinstatement Count`),\n    SUM(d.`Renewal Count`),\n    SUM(d.`Cancellation Count`),\n    SUM(d.`Inforce Premium`),\n    SUM(d.`New Business Written Premium`),\n    SUM(d.`Reinstatement Written Premium`),\n    SUM(d.`Renewal Written Premium`),\n    SUM(d.`Cancellation Written Premium`)\n  FROM details d\n) u;\n",
      "order": 0
    },
    {
      "id": "f1cd1604-21e9-11f0-a33b-0affecc16349",
      "name": "MCAS Policies Overview",
      "sql_query": "-- CTE to extract MCAS tags from deeply nested JSON structure in policy_type_items\nWITH v_mcas_system_tags AS (\n    SELECT * FROM v_mcas_system_tags\n),\n\n-- Simple alias for m_inforce_policies for readability\ninforce_policies AS (\n    SELECT * FROM m_inforce_policies\n),\n\n-- Aggregate MCAS tagging data by revision and policy type\npolicy_mcas_flags AS (\n    SELECT\n        pt.policy_type, -- Human-readable name for the policy type\n        ip.policy_type_id, -- ID of the policy type\n        ip.revision_id, -- Unique revision identifier for the policy\n        ip.inforce_premium, -- Premium amount for the in-force policy\n        -- Extract top-level MCAS tag from the policy_type_system_tags JSON field\n        JSON_UNQUOTE(JSON_EXTRACT(pt.policy_type_system_tags, '$.MCAS')) AS mcas_tag_policy_type,\n        -- Flag to indicate if categorized MCAS tags were found\n        MAX(CASE\n            WHEN mst.policy_type_item_category IS NOT NULL THEN 1\n            ELSE 0\n        END) AS has_mcas_tag_category\n    FROM inforce_policies ip\n    -- Join to get revision details\n    JOIN v_revisions vr ON vr.revision_id = ip.revision_id\n    -- Join to get policy type details\n    JOIN v_policy_types pt ON pt.policy_type_id = ip.policy_type_id\n    -- Left join to pull in MCAS tags from category-level extraction\n    LEFT JOIN v_mcas_system_tags mst ON mst.policy_type_id = ip.policy_type_id\n    -- Grouping by revision and policy type to enable aggregation\n    GROUP BY ip.revision_id, ip.policy_type_id, ip.inforce_premium, pt.policy_type\n)\n\n-- Final query: summarize MCAS-tagged policies by policy type\nSELECT\n    COALESCE(pmf.policy_type, 'Total') AS `Policy Type`, -- Group label or total row\n    -- Sum of inforce premiums for policies tagged at the top-level MCAS field\n    SUM(CASE\n        WHEN pmf.mcas_tag_policy_type IS NOT NULL AND pmf.mcas_tag_policy_type <> ''\n        THEN pmf.inforce_premium\n        ELSE 0\n    END) AS `MCAS Tag - Policy Type`,\n    -- Sum of inforce premiums for policies tagged within categories\n    SUM(CASE\n        WHEN pmf.has_mcas_tag_category = 1\n        THEN pmf.inforce_premium\n        ELSE 0\n    END) AS `MCAS Tag - Category`,\n    -- Count of policies with top-level MCAS tags\n    SUM(CASE\n        WHEN pmf.mcas_tag_policy_type IS NOT NULL AND pmf.mcas_tag_policy_type <> ''\n        THEN 1\n        ELSE 0\n    END) AS `MCAS Tag - Policy Type Count`,\n    -- Count of policies with categorized MCAS tags\n    SUM(CASE\n        WHEN pmf.has_mcas_tag_category = 1\n        THEN 1\n        ELSE 0\n    END) AS `MCAS Tag - Category Count`\nFROM policy_mcas_flags pmf\n-- Group by policy type with a rollup row at the bottom for totals\nGROUP BY pmf.policy_type WITH ROLLUP\n-- Ensure 'Total' row is shown at the end\nORDER BY pmf.policy_type IS NULL, pmf.policy_type;\n",
      "order": 1
    },
    {
      "id": "1e185b41-21ea-11f0-a33b-0affecc16349",
      "name": "Policies Details",
      "sql_query": "SELECT\n    vr.policy_number AS `Policy Number`,           -- Selects the policy number from v_revisions\n    pt.policy_type AS `Policy Type`,               -- Selects the policy type description\n    ip.inforce_premium AS `Inforce Premium`,      -- Selects the current premium amount\n    GROUP_CONCAT(                                 -- Concatenates occupancy values into a single string\n        JSON_UNQUOTE(                             -- Removes quotes from JSON-extracted values\n            JSON_EXTRACT(                         -- Extracts the Occupancy field from builder_obj JSON\n                vpi.builder_obj, \n                '$.categories.Occupancy'\n            )\n        ) \n        SEPARATOR ', '                            -- Uses comma and space as separator\n    ) AS `Occupancy`,                             -- Aliases the concatenated result as Occupancy\n    COUNT(*) AS `Number Properties`,              -- Counts the number of properties per policy\n    vc.contact_name AS `Contact Name`,            -- Selects the named insured's contact name\n    ra.agency_name AS `Agency Name`               -- Selects the agency name\nFROM m_inforce_policies ip                           -- Main table: inforce policies\nJOIN v_revisions vr                               -- Joins with revisions to get policy numbers\n    ON vr.revision_id = ip.revision_id\nJOIN v_policy_types pt                            -- Joins with policy types for type description\n    ON pt.policy_type_id = ip.policy_type_id\nJOIN v_revisions_contacts vrc                     -- Joins with revision contacts for named insured\n    ON vrc.revision_id = ip.revision_id\n    AND vrc.relationship = 'named_insured'        -- Filters for named insured relationship\nJOIN v_contacts vc                                -- Joins with contacts for contact name\n    ON vc.contact_id = vrc.contact_id\nJOIN v_revisions_agencies ra                      -- Joins with agencies for agency name\n    ON ra.revision_id = ip.revision_id\nJOIN v_property_items vpi                         -- Joins with property items for occupancy data\n    ON ip.revision_id = vpi.revision_id\n    AND vpi.item_name IN (                        -- Filters for items tagged as Occupancy\n        SELECT DISTINCT(item_name)                -- Gets unique item names\n        FROM v_mcas_system_tags                   -- From system tags table\n        WHERE policy_type_item_category = 'Occupancy'  -- Where tag value is Occupancy\n    )\nGROUP BY vr.policy_id,                            -- Groups results by policy ID\n         pt.policy_type,                         -- Policy type\n         ip.inforce_premium                      -- Inforce premium\n",
      "order": 2
    },
    {
      "id": "2651f9fc-21ea-11f0-a33b-0affecc16349",
      "name": "Policy Transactions",
      "sql_query": "-- Extracts MCAS tags from deeply nested JSON and combines with inforce transactions\nWITH v_mcas_system_tags AS (\n    SELECT * FROM v_mcas_system_tags\n)\nSELECT\n    vr.policy_number AS `Policy Number`,                              -- Policy number\n    pt.policy_type AS `Policy Type`,                                  -- Name of the policy type\n    ip.transaction_written_premium AS `Written Premium`,              -- Premium amount for the transaction\n    ip.transaction_type AS `Transaction Type`,                        -- Type of transaction (e.g., New Business)\n    JSON_UNQUOTE(\n        JSON_EXTRACT(pt.policy_type_system_tags, '$.MCAS')\n    ) AS `MCAS Tag Policy Type`,                                      -- Extract MCAS tag directly from system_tags\n    GROUP_CONCAT(\n        DISTINCT mst.policy_type_item_category_target_system_tag_value\n        ORDER BY mst.policy_type_item_category_target_system_tag_value ASC SEPARATOR ', '\n    ) AS `MCAS Tag Categories`                                        -- Aggregated MCAS tags from builder config\nFROM m_premium_transactions ip\nJOIN v_revisions vr\n    ON vr.revision_id = ip.revision_id\nJOIN v_policy_types pt\n    ON pt.policy_type_id = ip.policy_type_id\nLEFT JOIN v_mcas_system_tags mst\n    ON mst.policy_type_id = ip.policy_type_id\nGROUP BY ip.revision_id, ip.policy_type_id;\n",
      "order": 3
    },
    {
      "id": "2d00ab26-21ea-11f0-a33b-0affecc16349",
      "name": "Claim Activities",
      "sql_query": "WITH v_mcas_system_tags AS ( SELECT * FROM v_mcas_system_tags ),\ninforce_policies AS (SELECT * FROM m_inforce_policies),\n_claim_change_log AS (\n        SELECT\n            l.claim_id,\n            l.change_date_time AS opened,\n            (SELECT\n                MIN(change_date_time)\n            FROM\n                v_claim_change_log\n            WHERE\n                claim_id = l.claim_id\n                AND change_date_time > l.change_date_time\n                AND change_type = 'status'\n                AND changed_to LIKE '%closed%') closed\n        FROM\n            v_claim_change_log l\n        WHERE\n            l.change_type = 'status'\n                AND l.changed_to LIKE '%open%'\n), filtered_claims AS (\n\tSELECT\n\t\tc.claim_number,\n\t\tc.claim_type,\n\t\tpt.policy_type,\n        ci.policy_item_name,\n\t\tmst.policy_type AS mcas_tagged_policy_type,\n\t\tmst.item_target_system_tag_value AS mcas_tagged_coverage,\n\t\tc.date_added,\n\t\tcc.opened,\n\t\tcc.closed,\n\t\tYEAR(cc.opened) yearOpened,\n\t\tYEAR(cc.closed) yearClosed,\n\t\tCOALESCE(MIN(lii.date_incurred), '') firstPaid,\n\t\tCOALESCE(MAX(lii.date_incurred), '') lastPaid,\n\t\tSUM(CASE\n\t\t\tWHEN lii.date_incurred IS NOT NULL THEN lii.loss_paid\n\t\t\tELSE 0\n\t\tEND) lossPaid,\n\t\tCASE SUM(CASE\n\t\t\tWHEN lii.date_incurred IS NOT NULL THEN lii.loss_paid\n\t\t\tELSE 0\n\t\tEND)\n\t\t\tWHEN 0 THEN 0\n\t\t\tELSE 1\n\t\tEND paid,\n\t\tDATEDIFF(CASE COALESCE(MAX(lii.date_incurred), '')\n\t\t\t\t\tWHEN '' THEN cc.closed\n\t\t\t\t\tELSE MAX(lii.date_incurred)\n\t\t\t\tEND,\n\t\t\t\tcc.opened) daysToPayOrClose\n\tFROM\n\t\tv_claim_items ci\n\t\tJOIN v_claims c ON c.claim_id = ci.claim_id AND c.claim_active_flag\n\t\tJOIN _claim_change_log cc ON cc.claim_id = c.claim_id\n\t\tJOIN v_property_items pd ON pd.property_id = c.property_id\n        JOIN v_policy_types pt ON pt.policy_type_id = c.policy_type_id\n\t\tLEFT JOIN v_losses_incurred lii ON lii.claim_item_id = ci.claim_item_id\n\t\t\tAND lii.loss_paid <> 0 AND CAST(lii.date_incurred AS DATE) BETWEEN DATE_SUB(cc.opened, INTERVAL 1 DAY) AND DATE_ADD(cc.closed, INTERVAL 1 DAY)\n\t\tLEFT JOIN v_mcas_system_tags mst ON mst.policy_type_id = c.policy_type_id AND mst.policy_type_item_id = ci.policy_type_item_id AND COALESCE (mst.policy_type_item_category_target_system_tag_value, mst.item_target_system_tag_value, mst.subline_target_system_tag_value, mst.policy_type_target_system_tag_value, mst.line_target_system_tag_value) IS NOT NULL\n    GROUP BY policy_item_name, closed\n\tHAVING NOT (lossPaid <= 0\n\t\tAND CAST(cc.opened AS DATE) <> CAST(c.date_added AS DATE)) AND daysToPayOrClose IS NOT NULL\n) SELECT\n\t  COUNT(CASE WHEN opened < '<<$StartDate>>' AND (closed IS NULL OR closed >= '<<$StartDate>>') THEN 1 END) AS claims_open_at_start,\n\t  COUNT(CASE WHEN opened <= '<<$EndDate>>' AND (closed IS NULL OR closed > '<<$EndDate>>') THEN 1 END) AS claims_open_at_end,\n\t  COUNT(CASE WHEN opened BETWEEN '<<$StartDate>>' AND '<<$EndDate>>' THEN 1 END) AS claims_opened_during,\n\t  COUNT(CASE WHEN closed BETWEEN '<<$StartDate>>' AND '<<$EndDate>>' AND paid = TRUE THEN 1 END) AS claims_closed_with_payment,\n\t  COUNT(CASE WHEN closed BETWEEN '<<$StartDate>>' AND '<<$EndDate>>' AND paid = FALSE THEN 1 END) AS claims_closed_without_payment,\n\t  COUNT(CASE WHEN closed BETWEEN '<<$StartDate>>' AND '<<$EndDate>>' AND paid = TRUE AND daysToPayOrClose BETWEEN 0 AND 30 THEN 1 END) AS closed_with_payment_0_30,\n\t  COUNT(CASE WHEN closed BETWEEN '<<$StartDate>>' AND '<<$EndDate>>' AND paid = TRUE AND daysToPayOrClose BETWEEN 31 AND 60 THEN 1 END) AS closed_with_payment_31_60,\n\t  COUNT(CASE WHEN closed BETWEEN '<<$StartDate>>' AND '<<$EndDate>>' AND paid = TRUE AND daysToPayOrClose BETWEEN 61 AND 90 THEN 1 END) AS closed_with_payment_61_90,\n\t  COUNT(CASE WHEN closed BETWEEN '<<$StartDate>>' AND '<<$EndDate>>' AND paid = TRUE AND daysToPayOrClose BETWEEN 91 AND 180 THEN 1 END) AS closed_with_payment_91_180,\n\t  COUNT(CASE WHEN closed BETWEEN '<<$StartDate>>' AND '<<$EndDate>>' AND paid = TRUE AND daysToPayOrClose BETWEEN 181 AND 365 THEN 1 END) AS closed_with_payment_181_365,\n\t  COUNT(CASE WHEN closed BETWEEN '<<$StartDate>>' AND '<<$EndDate>>' AND paid = TRUE AND daysToPayOrClose > 365 THEN 1 END) AS closed_with_payment_365_plus,\n\t  COUNT(CASE WHEN closed BETWEEN '<<$StartDate>>' AND '<<$EndDate>>' AND paid = FALSE AND daysToPayOrClose BETWEEN 0 AND 30 THEN 1 END) AS closed_without_payment_0_30,\n\t  COUNT(CASE WHEN closed BETWEEN '<<$StartDate>>' AND '<<$EndDate>>' AND paid = FALSE AND daysToPayOrClose BETWEEN 31 AND 60 THEN 1 END) AS closed_without_payment_31_60,\n\t  COUNT(CASE WHEN closed BETWEEN '<<$StartDate>>' AND '<<$EndDate>>' AND paid = FALSE AND daysToPayOrClose BETWEEN 61 AND 90 THEN 1 END) AS closed_without_payment_61_90,\n\t  COUNT(CASE WHEN closed BETWEEN '<<$StartDate>>' AND '<<$EndDate>>' AND paid = FALSE AND daysToPayOrClose BETWEEN 91 AND 180 THEN 1 END) AS closed_without_payment_91_180,\n\t  COUNT(CASE WHEN closed BETWEEN '<<$StartDate>>' AND '<<$EndDate>>' AND paid = FALSE AND daysToPayOrClose BETWEEN 181 AND 365 THEN 1 END) AS closed_without_payment_181_365,\n\t  COUNT(CASE WHEN closed BETWEEN '<<$StartDate>>' AND '<<$EndDate>>' AND paid = FALSE AND daysToPayOrClose > 365 THEN 1 END) AS closed_without_payment_365_plus\n  FROM filtered_claims\n",
      "order": 4
    },
    {
      "id": "3a8ecf8b-21ea-11f0-a33b-0affecc16349",
      "name": "Claim Details",
      "sql_query": "WITH v_mcas_system_tags AS ( SELECT * FROM v_mcas_system_tags ),\ninforce_policies AS ( SELECT * FROM m_inforce_policies),\n_claim_change_log AS (\n        SELECT\n            l.claim_id,\n            l.change_date_time AS opened,\n            (SELECT\n                MIN(change_date_time)\n            FROM\n                v_claim_change_log\n            WHERE\n                claim_id = l.claim_id\n                AND change_date_time > l.change_date_time\n                AND change_type = 'status'\n                AND changed_to LIKE '%closed%') closed\n        FROM\n            v_claim_change_log l\n        WHERE\n            l.change_type = 'status'\n                AND l.changed_to LIKE '%open%'\n), filtered_claims AS (\n\tSELECT\n\t\tc.claim_number,\n\t\tc.claim_type,\n\t\tpt.policy_type,\n        ci.policy_item_name,\n\t\tmst.policy_type AS mcas_tagged_policy_type,\n\t\tmst.item_target_system_tag_value AS mcas_tagged_coverage,\n\t\tc.date_added,\n\t\tcc.opened,\n\t\tcc.closed,\n\t\tYEAR(cc.opened) yearOpened,\n\t\tYEAR(cc.closed) yearClosed,\n\t\tCOALESCE(MIN(lii.date_incurred), '') firstPaid,\n\t\tCOALESCE(MAX(lii.date_incurred), '') lastPaid,\n\t\tSUM(CASE\n\t\t\tWHEN lii.date_incurred IS NOT NULL THEN lii.loss_paid\n\t\t\tELSE 0\n\t\tEND) lossPaid,\n\t\tCASE SUM(CASE\n\t\t\tWHEN lii.date_incurred IS NOT NULL THEN lii.loss_paid\n\t\t\tELSE 0\n\t\tEND)\n\t\t\tWHEN 0 THEN 0\n\t\t\tELSE 1\n\t\tEND paid,\n\t\tDATEDIFF(CASE COALESCE(MAX(lii.date_incurred), '')\n\t\t\t\t\tWHEN '' THEN cc.closed\n\t\t\t\t\tELSE MAX(lii.date_incurred)\n\t\t\t\tEND,\n\t\t\t\tcc.opened) daysToPayOrClose\n\tFROM\n\t\tv_claim_items ci\n\t\tJOIN v_claims c ON c.claim_id = ci.claim_id AND c.claim_active_flag\n\t\tJOIN _claim_change_log cc ON cc.claim_id = c.claim_id\n\t\tJOIN v_property_items pd ON pd.property_id = c.property_id\n        JOIN v_policy_types pt ON pt.policy_type_id = c.policy_type_id\n\t\tLEFT JOIN v_losses_incurred lii ON lii.claim_item_id = ci.claim_item_id\n\t\t\tAND lii.loss_paid <> 0 AND CAST(lii.date_incurred AS DATE) BETWEEN DATE_SUB(cc.opened, INTERVAL 1 DAY) AND DATE_ADD(cc.closed, INTERVAL 1 DAY)\n\t\tLEFT JOIN v_mcas_system_tags mst ON mst.policy_type_id = c.policy_type_id AND mst.policy_type_item_id = ci.policy_type_item_id\n\tGROUP BY policy_item_name, closed\n\tHAVING NOT (lossPaid <= 0\n\t\tAND CAST(cc.opened AS DATE) <> CAST(c.date_added AS DATE)) AND daysToPayOrClose IS NOT NULL\n) SELECT * FROM filtered_claims\n",
      "order": 5
    },
    {
      "id": "428ade34-21ea-11f0-a33b-0affecc16349",
      "name": "Policy Underwriting",
      "sql_query": "WITH v_mcas_system_tags AS ( select * from v_mcas_system_tags ),\n_inforce_policies AS (SELECT * FROM m_inforce_policies)\nSELECT\n    mst.policy_type_target_system_tag_value mcas_policy_type,\n    COUNT(DISTINCT r.policy_id) number_of_policies\nFROM\n    _inforce_policies ip\n        JOIN\n    v_revisions r ON r.revision_id = ip.revision_id AND ip.policy_type_id = r.policy_type_id AND (r.policy_status = 'Active' OR r.policy_status LIKE '%Pending%') AND (r.policy_number NOT LIKE '%-X%')\n        JOIN\n    (SELECT '<<$EndDate>>' tme) d ON d.tme >= r.term_effective_date AND d.tme < r.term_expiration_date\n        JOIN\n    v_policy_types pt ON pt.policy_type_id = r.policy_type_id\n        JOIN\n    v_property_items pi ON pi.revision_id = r.revision_id AND NOT pi.property_deleted\n        JOIN\n    v_mcas_system_tags mst ON mst.policy_type_id = r.policy_type_id AND mst.policy_type_item_id = pi.policy_type_item_id\nGROUP BY 1;\n",
      "order": 6
    },
    {
      "id": "60bc488d-2925-11f0-b43e-123b68669b63",
      "name": "Cancelled Policy Details",
      "sql_query": "WITH _inforced_policy_revisions_with_mcas_tags AS (\n\tSELECT \n\t  DISTINCT r.*\n\tFROM\n\t\tv_revisions r\n\tJOIN v_property_items pi ON pi.revision_id = r.revision_id AND NOT pi.property_deleted\n \tJOIN v_mcas_system_tags mst ON mst.policy_type_id = r.policy_type_id AND mst.policy_type_item_id = pi.policy_type_item_id\n),\n _notice_of_cancellation_files AS (\n\tSELECT * FROM v_files f WHERE file_label = 'Notice of Cancellation' AND date_to_print IS NOT NULL \n    AND f.contact_id IN (SELECT DISTINCT contact_id FROM v_revisions_contacts WHERE relationship = 'named_insured')\n) \nSELECT \n\t\tr.policy_number,\n\t\tr.cancel_date,\n\t\tr.inception_date,\n\t\tYEAR(r.term_effective_date) - YEAR(r.inception_date) numRenewals,\n\t\tr.policy_status,\n\t\tr.policy_status_reason,\n        r.cancellation_category,\n\t\tCASE\n\t\t\tWHEN DATEDIFF(MIN(f.date_printed), r.inception_date) <= 60 THEN ' < 60'\n\t\t\tWHEN DATEDIFF(MIN(f.date_printed), r.inception_date) < 91 THEN '60-90'\n\t\t\tELSE '>90'\n\t\tEND date_to_cancel_range,\n\t\tDATEDIFF(MIN(f.date_printed), r.inception_date) date_to_cancel,\n\t\tCOUNT(DISTINCT CASE\n\t\t\tWHEN\n\t\t\t\tr.policy_status_reason LIKE '%suffi%'\n\t\t\t\t\tOR r.policy_status_reason LIKE '%pay%'\n\t\t\t\t\tOR r.policy_status LIKE '%pay%'\n\t\t\tTHEN\n\t\t\t\tr.policy_id\n\t\tEND) non_pay,\n\t\tCOUNT(DISTINCT CASE\n\t\t\tWHEN\n\t\t\t\tr.policy_status NOT LIKE '%pay%'\n\t\t\t\t\tAND (r.policy_status_reason LIKE '%request%'\n\t\t\t\t\tOR r.policy_status_reason LIKE '%sold%'\n\t\t\t\t\tOR r.policy_status_reason LIKE '%deceas%'\n\t\t\t\t\tOR r.policy_status_reason LIKE 'Premium too high%'\n\t\t\t\t\tOR r.policy_status_reason LIKE '%elsewhere%'\n\t\t\t\t\tOR r.policy_status_reason LIKE '%foreclos%'\n\t\t\t\t\tOR r.policy_status_reason LIKE '%owner%')\n\t\t\tTHEN\n\t\t\t\tr.policy_id\n\t\tEND) insured_request,\n\t\tCOUNT(DISTINCT r.policy_id) cancels\nFROM _inforced_policy_revisions_with_mcas_tags r \nJOIN _notice_of_cancellation_files f ON f.policy_id = r.policy_id\nWHERE r.policy_status LIKE 'Canceled%'\n\tAND YEAR(r.cancel_date) = YEAR('<<$EndDate>>')\n\tAND NOT r.revision_deleted\n\tAND r.revision_state IN ('committed')\nGROUP BY 1, 2, 3\n",
      "order": 7
    },
    {
      "id": "16914e51-29b2-11f0-a4aa-12b041b332b3",
      "name": "Company Request Cancellations",
      "sql_query": "WITH _inforced_policy_revisions_with_mcas_tags AS (\n    SELECT \n        DISTINCT r.*\n    FROM\n        v_revisions r\n    JOIN v_property_items pi ON pi.revision_id = r.revision_id AND NOT pi.property_deleted\n    JOIN v_mcas_system_tags mst ON mst.policy_type_id = r.policy_type_id AND mst.policy_type_item_id = pi.policy_type_item_id\n),\n    _notice_of_cancellation_files AS (\n    SELECT * FROM v_files f WHERE file_label = 'Notice of Cancellation' AND date_to_print IS NOT NULL \n    AND f.contact_id IN (SELECT DISTINCT contact_id FROM v_revisions_contacts WHERE relationship = 'named_insured')\n), cancellation_details AS (\n    SELECT \n        r.policy_number,\n        r.cancel_date,\n        r.inception_date,\n        YEAR(r.term_effective_date) - YEAR(r.inception_date) numRenewals,\n        r.policy_status,\n        r.policy_status_reason,\n        r.cancellation_category,\n        CASE\n            WHEN DATEDIFF(MIN(f.date_printed), r.inception_date) <= 60 THEN ' < 60'\n            WHEN DATEDIFF(MIN(f.date_printed), r.inception_date) < 91 THEN '60-90'\n            ELSE '>90'\n        END date_to_cancel_range,\n        DATEDIFF(MIN(f.date_printed), r.inception_date) date_to_cancel,\n        COUNT(DISTINCT CASE\n            WHEN\n                r.policy_status_reason LIKE '%suffi%'\n                    OR r.policy_status_reason LIKE '%pay%'\n                    OR r.policy_status LIKE '%pay%'\n            THEN\n                r.policy_id\n        END) non_pay,\n        COUNT(DISTINCT CASE\n            WHEN\n                r.policy_status NOT LIKE '%pay%'\n                    AND (r.policy_status_reason LIKE '%request%'\n                    OR r.policy_status_reason LIKE '%sold%'\n                    OR r.policy_status_reason LIKE '%deceas%'\n                    OR r.policy_status_reason LIKE 'Premium too high%'\n                    OR r.policy_status_reason LIKE '%elsewhere%'\n                    OR r.policy_status_reason LIKE '%foreclos%'\n                    OR r.policy_status_reason LIKE '%owner%')\n            THEN\n                r.policy_id\n        END) insured_request,\n        COUNT(DISTINCT r.policy_id) cancels\n    FROM _inforced_policy_revisions_with_mcas_tags r \n    JOIN _notice_of_cancellation_files f ON f.policy_id = r.policy_id\n    WHERE r.policy_status LIKE 'Canceled%'\n        AND YEAR(r.cancel_date) = YEAR('<<$EndDate>>')\n        AND NOT r.revision_deleted\n        AND r.revision_state IN ('committed')\n    GROUP BY 1, 2, 3\n    HAVING cancels - insured_request - non_pay > 0\n)\nSELECT \n    c.date_to_cancel_range,  \n -- c.reason, \n    COUNT(*) company_request \nFROM cancellation_details c\nWHERE c.policy_status NOT LIKE '%Pay%' \nGROUP BY 1 -- , 2\nORDER BY 1 ASC , 2 DESC\n;\n",
      "order": 8
    },
    {
      "id": "521e456e-301c-11f0-a4aa-12b041b332b3",
      "name": "Cancelled Policy By Reason",
      "sql_query": "WITH _inforced_policy_revisions_with_mcas_tags AS (\n    SELECT\n        DISTINCT r.*\n    FROM\n        v_revisions r\n    JOIN v_property_items pi ON pi.revision_id = r.revision_id AND NOT pi.property_deleted\n    JOIN v_mcas_system_tags mst ON mst.policy_type_id = r.policy_type_id AND mst.policy_type_item_id = pi.policy_type_item_id\n),\n    _notice_of_cancellation_files AS (\n    SELECT * FROM v_files f WHERE file_label = 'Notice of Cancellation' AND date_to_print IS NOT NULL\n    AND f.contact_id IN (SELECT DISTINCT contact_id FROM v_revisions_contacts WHERE relationship = 'named_insured')\n), cancellation_details AS (\n    SELECT\n        r.policy_number,\n        r.cancel_date,\n        r.inception_date,\n        YEAR(r.term_effective_date) - YEAR(r.inception_date) numRenewals,\n        r.policy_status,\n        r.policy_status_reason,\n        r.cancellation_category,\n        CASE\n            WHEN DATEDIFF(MIN(f.date_printed), r.inception_date) <= 60 THEN ' < 60'\n            WHEN DATEDIFF(MIN(f.date_printed), r.inception_date) < 91 THEN '60-90'\n            ELSE '>90'\n        END date_to_cancel_range,\n        DATEDIFF(MIN(f.date_printed), r.inception_date) date_to_cancel,\n        COUNT(DISTINCT CASE\n            WHEN\n                r.policy_status_reason LIKE '%suffi%'\n                    OR r.policy_status_reason LIKE '%pay%'\n                    OR r.policy_status LIKE '%pay%'\n            THEN\n                r.policy_id\n        END) non_pay,\n        COUNT(DISTINCT CASE\n            WHEN\n                r.policy_status NOT LIKE '%pay%'\n                    AND (r.policy_status_reason LIKE '%request%'\n                    OR r.policy_status_reason LIKE '%sold%'\n                    OR r.policy_status_reason LIKE '%deceas%'\n                    OR r.policy_status_reason LIKE 'Premium too high%'\n                    OR r.policy_status_reason LIKE '%elsewhere%'\n                    OR r.policy_status_reason LIKE '%foreclos%'\n                    OR r.policy_status_reason LIKE '%owner%')\n            THEN\n                r.policy_id\n        END) insured_request,\n        COUNT(DISTINCT r.policy_id) cancels\n    FROM _inforced_policy_revisions_with_mcas_tags r\n    JOIN _notice_of_cancellation_files f ON f.policy_id = r.policy_id\n    WHERE r.policy_status LIKE 'Canceled%'\n        AND YEAR(r.cancel_date) = YEAR('<<$EndDate>>')\n        AND NOT r.revision_deleted\n        AND r.revision_state IN ('committed')\n    GROUP BY 1, 2, 3\n)\nSELECT\n    SUM(c.non_pay) AS non_pay_cancellations,\n    SUM(c.insured_request) AS insured_request_cancellations,\n    SUM(CASE WHEN c.cancels - c.insured_request - c.non_pay > 0 THEN 1 ELSE 0 END) AS company_initiated_cancellations\nFROM cancellation_details c\nORDER BY 1 ASC , 2 DESC\n;\n",
      "order": 9
    },
    {
      "id": "4e458ae1-318f-11f0-ac4b-0affd6b10445",
      "name": "MCAS System Tags",
      "sql_query": "SELECT * FROM v_mcas_system_tags;\n",
      "order": 10
    }
  ],
  "output_format": "excel",
  "output_file_delimiter": ",",
  "additional_report_settings": {
    "includeColumnHeaders": true,
    "previewId": "",
    "entity": ""
  },
  "category_name": "Market Conduct Annual Statement (MCAS)"
}
